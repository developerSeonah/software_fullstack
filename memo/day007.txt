객체지향언어의 4가지 특징
1. 캡슐화
2. 추상화
3. 상속
4. 다형성

유지보수 용이성 극대화
- 코드를 잘게잘게 잘라야함 == 모듈화(컴포넌트화, 함수화)
	---> 코드 재사용성 증가
- 오류 발견시 수정을 적게한다.
	---> 오류의 파급효과 절감
- 결과를 다양하게 추출할 수 있음
- 개발시간 단축, 개발비용 축소

1. 상속
 부모 클래스(상위 클래스)의 코드를 자식 클래스(하위 클래스) 전부 재사용할 수 있는 것을 말한다.

사용
class 자식클래스명 extends 부모클래스명{
}
ex)
class ColorPoint extends Point

특징
1. 클래스를 상속받으면 해당 클래스의 코드를 전부 재사용할 수 있다.

상속을 할 때 유의할 점
  자식 클래스의 모든 생성자들은 가장 먼저 부모 클래스의 기본 생성자를 호출한다.
  1. 부모 클래스에 기본 생성자를 선언(정의) (x)
	=> 먼저 작성된 코드를 나중에 작성되는 코드 때문에 변경한다>
	=> 대부분 잘못된 해결방식...!!
		: 기본 생성자를 사용하지않는 이유는 "강제"
		  기본 생성자를 만들어버린다? 강제성을 잃게 됨
  2. 부모 클래스에 존재하는 다른 생성자를 대신 사용 o
	부모를 super라고 부름

super(x,y);
// 자식 클래스의 객체를 만들 때에는
// 부모 클래스의 생성자 선 호출 --> 자식 클래스 생성자 호출

오버로딩 : 함수명 중복정의 허용
오버라이딩 : 

Shape		그냥 넓이 구하기
Circle		r*r*PI
Rectangle	x*y

자식 메서드가 부모 메서드를 사용하고 싶지만 자신에게 알맞게 바꿔서 사용하고 싶다
	== 오버라이딩
	== 메서드 재정의
	== 상속 관계에서만 발생

원하는 위치에 오른쪽 클릭 > source > override

객체지향의 핵심
같은 메서드를 수행시켜도 객체가 다르다면 다른 결과가 나온다.