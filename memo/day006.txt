오버로딩이란?
메처드 시그니쳐가 다르다면 메소드명이 같더라도 이를 허용한다는 특징
함수명 중복 정의 허용
비슷하거나 유사하거나 같은 기능일 때 사용

	이름이 같더라도 매개변수로 알아서 찾아감

어떠한 변수 값이 객체가 달라져도 동일할 때
클래스 변수를 사용한다.
 => 사용하는 이유 : 멤버 변수로 사용할 시 객체가 생성될 때마다
		동일한 값이 각각의 개체 메모리에 할당됨
		용량 낭비

멤버변수 필드 속성 attribute property
멤버변수 초기화를 생성자에서 초기화

static 클래서 변수
클래스에서 초기화

final == 변수값 고정 == 상수화

ex)
피카츄
p1 	p2
level	level
경험치	경험치
성격	성격
스피드	스피드
---------------------------> 멤버변수
피카츄	피카츄
전기	전기
----------------------------> static

멤버변수가 많아질수록 생성자 함수도 너무 많이 증가한다.
=> 코드 재사용을 하자
1. 가장 인자가 많은 생성자 함수를 먼저 구현하고,
2. 나머지 생성자 함수가 1을 재사용한다.

클래스의 관리 순서는
보통
	멤버변수
	생성자
	함수
		순으로 한다.



학생부를 학생데이터로 이용해보자!
1. CRUD 정의하기
C 학생추가
R 학생 전체 목록 출력 selectAll
   학생 PK를 검색해서 출력 selectOne
   학생이름으로 검색해서 출력 selectAll
   1등 출력 selectAll
   등급으로 출력 selectAll
U 재시험을 봐서 성적에 변화가 생긴 경우

샘플데이터 >> 전체 출력 >> CREATE 데이터를 추가

절차지향은 메소드의 주어가 없다.
객체지향은 메소드의 주어가 있다.

함수
주어가 없다.
절차지향
문제를 해결하는 것이 중요

메서드
주어가 있다.
객체.메서드()
객체지향
객체가 해당 기능을 수행하는 것
