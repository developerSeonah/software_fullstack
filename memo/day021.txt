MVC 정리
1. static 객체와 무관하게 == 클래스 변수 == 공유 자원(모든 객체들이 값을 공유)
2. final 상수화 == 값 변경 x


예외 처리할 때는 예외가 일어나는 부분을 특정할 수 있어야 한다.
어떤 예외가 일어났는지 사용자에게 알려야 한다.
언제나 안내를 해줘야 함 (ex. 0~n까지의 정수를 입력해주세요!)
	사용자의 경험을 생각해서 작성

1. 종료조건 생성
2. 사용자의 경험을 생각해서 출력 작성
3. 예외 처리

sleep 메서드는 예외가 발생할 수 있는 메모리 문제가 있을 수 있기 때문에 try catch가 강제되어있는 메서드이다.
System.err.println() : 빨간색으로 출력됨.


생성자 : 멤버변수 초기화(역할), 생성자를 통해 객체를 생성할 수 있음

기능 하나를 수행할 때마다 (new)DTO를 만들어야 되는개 컨트롤러의 역할

코딩 순서
view 한테 data를 줄거야
data를 만들어야겠네?
모델한테 data를 달라고 하자
모델한테 data를 받을 객체를 만들잔

DAO는 멤버변수로 DB역할을 할 ArrayList가 있음

insert(), update(), delete()
	의 인자는 DTO, return 값은 boolean으로 고정

인자를 DTO로 고정하는 이유
 : 낮은 결합도 ▶ 유지보수 용이

selectAll() 등
여러 기능을 하나의 비즈니스 메서드에서 처리하는 이유
 : 높은 응집도 ▶ 유지보수 용이
  응집도가 높다는 같은 종류의 CRUD라면 하나의 메서드에서 작성하는 것이 보기 좋고, 찾아보기 좋다.

데이터는 직접적으로 주는 것보다 복사해서 주는 편이 보안에 더 좋다.


client
앱을 다운받고 (new)
앱을 실행 (start())


크롤링
제일 먼저 라이브러를 넣음
프로젝트마다 넣어줘야함.

라이브러리 == jar == JAVA 압축파일 == JAVA 소스코드 모음집

(1.) 잘 돌아가는 지 확인
	main을 생성
	어디로 접속할지 정함. url 정함
		index는 표지 페이지를 의미함
	1. 연결 확보
		Connection
			import 패키지 확인★
2. 문서 가져오기
	Document
		// 웹 페이지 문서 확보
		인터넷 연결 등의 문제가 있을 수 있으니
		try catch문 (IOException)
		finally로 로그 생성
3. 원하는 요소 데려오기
	Elements
		<클래스명 name = 이름>
		elems = doc.select("클래스명.이름")
			// Elements에 요소 넣기
		span일 경우
		span에는 부가적인 기능 이 많음
			"span.item_price > span"
			> : 는 자식(하위)의 의미를 가짐
			선택자 컨트롤

		Elements는 포인터 기반의 클래스라 1회성
			한 번 사용할 때마다 새로 생성해야 함.

4. 전달할 datas를 만들고,
	datas 안에 값을 넣는다.
	리스트를 반환하는 함수로 만든다.

5. 전달될 DAO에 받아온다.
	크롤링할 객체를 받아오고
	샘플을 받아옴
	내 데이터스에 하나씩 추가

1. Thread 할 때 객체화 하지 않았다.
	// sleep이라는 메서드를 클래스에서 불러왔다. 클래스.메서드();

  Connection conn = Jsoup.connection(url)	// 객체화

	하나의 기능만을 수행할 때
	메서드를 객체와 무관하게 (객체화 하지 않고) 그냥 쓰세요
		static을 붙여줌
			new를 안 해도 그냥 쓸 수 있음


---------------------------------------
SQL

DBMS	Oracle	<< SQL 표준 언어
	MySQL
		2개를 함
1) 실무에서 DBMS를 바꾸는 일이 존재한다
2) 포트폴리오에서 "DBMS 이관작업"을 어필
Oracle 말하지x


CMD에서
1) sqlplus sys/oracle as sysdba
2) 

패스워드 1234로 통일

1. 본 컴퓨터의 유저명이
	영어가 아니다
		한글, 특수기호, 띄어쓰기 >> 에러남
	유저명을 변경해 주세요
2. 오타 확인!

이클립스를 GUI로 채택
	디비버, SQL DEVELOPER, ...

드라이버
  == 서로 다른 기기간에 소통(통신)을 위해서 중간다리 역할을 하는 것

JAVA(이클립스) <-------> Oracle(DBMS)랑 소통(통신)
		드라이버
		== ofdbc6.jar == Oracle 11g


테이블 SQL
	생성 CREATE
	삭제 DROP
	테이블을 변경한다는 것은 설계가 잘못됬다는 것이므로 다시해야함

데이터 SQL
	추가 INSERT
	변경 UPDATE
	삭제 DELETE
	출력 SELECT


SQL은 대소문자 구별을 하지 않는다.
	가독성을 위해 전부 대문자로 함

변수명 뒤에 타입을 적고
String은 VARCHAR
VARCHAR(150) //10글자
문자는 1글자당 3byte

COUNT는 SQL에서 키워드이기 때문에 사용하지 않는 것을 권장

컬럼 : 속성, ATTRIBUTE

-- 컬럼(COLUMN) 제약조건
	속성 뒤에 붙는다.

SQL == 스크립트어 == 인터프리터 언어
드래그로 선택한 부분만 실행

컬럼은 순서대로 입력

--보편적 작성 방법
INSERT INTO PRODUCT (NUM,NAME,PRICE,CONT) VALUES(11, '콜라', 1200, 10);
컬럼의 순서와 종류를 모르기 때문에 이름에 함께 작성

*
에스더리스트, 와일드 카드
전부라는 뜻
실무에선 쓰지 않음
성능이 아주 떨어짐

SELECT * FROM PRODUCT WHERE NAME LIKE '%라면%'
이름 검색


장점
프로그램을 꺼도 오라클 서버가 건재하기 때문에 데이터가 남아있다.

jdbc란
자바와 데이터베이스를 연결하는데 필요한 것
이때 필요한 자원들은 모두 상단에 위치

jdbc 코드는 패턴화 되어있음

SELECT와
DELETE, UPDATE는 다름