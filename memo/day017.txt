예외처리
  비정상 종료를 막기 위해
// [예외 처리]
// 프로그램을 이용하다가 예외가 발생하게되면
// 프로그램이 즉시 종료(비정상 종료)됙 때문에
// 예외를 개발자가 미리 처리해야한다!
// 결론) 예외 처리하는 이유가 뭔가요?
//		프로그램이 비정상적으로 종료되는 것을 예방하기 위해

try 예외발생할 수도 있는 코드 작성
예외가 발생하지 않으면
	아무일도 없음
예외가 있다면
	즉시 catch문으로 이동
	Exception 등록해두면되

예외발생여부와 무관하게
finally문이 수행됨


try문을 너무 넓게 잡으면 정확한 예외처리가 안 됨
catch문과 한 쌍이다.

e.printStackTrace(); // 예외가 발생된 원인주는 함수

// 예외를 모를 경우
// 모든 exception의 최상위 클래스를 사용
catch (Exception e) {
	System.out.println("알 수 없는 예외 발생함");
}
// 예외가 발생하더라도 정상 종료를 실행할 수 있는 것이 의의

finally {
	System.out.println("예외 발생여부와 무관하게 항상 수행되는 코드를 작성");
}


thread
앱: 사용자가 실행시킨 SW
백그라운드 프로세스 : 원래 수행중인 SW

앱(어플리케이션) == SW == 프로그램
// 엄밀히 말하면 다르지만 웹개발에선 비슷
// 존재하는 것들, 우리가 코딩하는 것들
프로세스 == 작업 == 실행중인 프로그램 == 메모리를 할당받은 프로그램

  (ex. test02) =실행=> 프로세스

사용자가 설치한 것은 프로그램
프로그램을 더블클릭해서 실행시키면(메모리, CPU, 자원을 할당하면) 프로세스
프로세스에서 실직적으로 일을 수행하는 주체 == 스레드
★ 병렬적으로, 개별적으로, 비동기적으로 일을 수행함
결론) 스레드가 일을 수행하면서 화면에 무언가 출력을 할텐데,
			출력되는 순서가 랜덤이다!

// 인터페이스 == 추상 메소드만 가질 수 있다.
// 추상 클래스가 덜 강제적일 수 있다.
인터페이스는 추상메소드만 담기 때문에 강제력이 더 강하다.
인터페이스로 생성할 시 진짜 Tread가 아니여서 인자로 넣어주는 방법이 필요

class Thread02 implements Runnable
Thread t2 = new Thread(new Thread02());

Tread.sleep(1000);
//Tread를 직접 건드리면 예외 발생할 수 있다.
// try, catch로 감싸라는 경고가 뜸

동시에 작동되기 때문에 한도 이상의 결과가 나올 수 있다.
ex) 티켓은 3개인데 산 사람은 4명
		공유자원에는 동기화를 시켜준다.
		누군가 한 명이 접근을 하면 다른 사름들은 홀딩한다.

공유자원 + 스레드가 조합되어있는 메서드의 경우 반드시 동기화를 해야된다. 

