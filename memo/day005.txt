(타)팀플 평
+
팀원 소개
코드 주석 및 정리가 자세해서 좋았음

-
설계과정
프로그램 구조 아쉬움
설계의 아쉬움
요구사항의 뉘양스에 맞는 코드 위치
어떤 변수(데이터)를 선언(정의) 할 때, 요구사항을 만족했는지 확인
	배열의 쓰임이 아쉽다.
		크기를 모르는데 사용

배운점
콘솔창에서 사용자가 알 수 있는 정보들이 많았다. 

+
함수 활용 : 코드 재사용성을 늘리기 위해

-
변수명
함수에 대한 설명 주석으로 넣으면 좋음
static : 배운 케이스 외에는 x 추천 >> 무겁다!
	인자, 인수, input으로 전달해가면서 사용 추천 o

------------------------------------------------------------
### 함수 제작 순서 ###
이미 존재하는 코드를 함수화 시키는 방법
  1. void 기능명()
  2. main에서 코드 뜯어오기
  3. return 있나 살펴보기
  4. 메서드 시그니쳐 변경
  5. 주석 제대로 설명 작성하기

※ 코드에 제어문(continue, break, return, ...)이 존재할 때
	>> 제어문은 main()에 위치해야만 함!
	>> if문과 함께 사용될 가능성이 매우 높음
	>> isXxxx(), hasXxxx()와 같은 boolean 반환 메서드로 변경

### 서로 비슷한 기능인데, 완벽히 동일하지는 않을 때 ###
1. 함수를 호출하고, 내부에서 1/2 버튼식으로 조정
2. 같은 부분까지만 함수로 두고, 다른 부분은 함수화 x

CREATE 저장
UPDATE 저장	2번으로 하면 좋을 듯

호출되는 공간이 다르기 때문에 2번이 유리할 듯 하다.


아무것도 없을 때, 함수부터 제작하는 방법
  1. input, output을 고려해보고
  2. 그에 맞는 메서드 시그니쳐 선언(정의)
  3. 기능 구현
  4. 변경사항 적용하기

	대체적으로 출력(select, read, R) 기능은 output이 없음

1. 코드 먼저 작성하고 >> 함수화
2. 함수 먼저 작성하고 >> main() 적용

---------------------------------------------------------------
=== 목차 ===
1. 변수 3요소 : 크기, 주소, 이름
2. 입출력 syso() Scanner
3. 제어문 선택적 if 반목적 while 횟수x, for 횟수o
4. 배열 3요소 관련성 자료형 크기 index[0]
5. 함수 3요소 input output 기능 >> 메서드 시그니쳐

=== 프로그램 ===
C 추가
R 출력 selectOne select All
U 변경
D 삭제
CRUD, 비즈니스 메서드, 핵심관심, ...

----------------------------------------------------------------------
절차지향 : 프로그램을 "순서에 맞게" 작성하는 것
	>> 흐름도(플로우 차트)

vs

객체지향 : 프로그램을 "객체 단위로" 나누어 작성하는 것
	>> 객체지향 코딩
	>> 순서가 사용자에 의해 변경되기 때문

객체끼리 상호작용하는 것들 ???

class는 객체지향 코딩의 기본단위이며,
	자료형

class는 배열이랑 같은 존재? xxx
class 관련o 자료형x
(class != 배열)

원시타입 int, double, ... 그냥 데이터 공간에 쓰지만
대문자로 시작하는
	== 클래스 타입인 객체들은 new 연산자 활용

클래스 변수명 = new 생성자();
클래스로 만든 변수 == 객체(instance, 인스턴스)

ex)
포켓몬 피카츄 = new 포켓몬();
포켓몬 : 자료형, JAVA 객체지향 코딩의 기본단위
피카츄 : 변수명, new로 만들었기 때문에 객체명
new : 클래스로 변수(객체)를 생성할 때 사용하는 연산자
포켓몬() : 생성자 함수. 클래스명과 동일하다는 특징

Student();
객체지향 언어 JAVA는 기본 생성자 함수를 기본으로 제공해 줍니다.

★ 생성자 함수
1. 클래스명과 동일한 함수이다.
2. new 연산자랑 함께 사용되며,
3. 객체를 생성하는 목표를 가진다.
	>> 생성자 함수는
	  수행 결과, 당연히 객체를 반환하기 때문에 반환타입 명시 xxx
4. 내부의 값을 모두 초기화시켜주는 역할을 담당
	>> heap 메모리 영역을 사용하기에 가능한 일!
	>> 멤버변수 초기화 == 멤버변수의 값을 '강제'
   내부의 값 == 멤버 변수, 필드, 속성, attribute, property, .....
5. JAVA에서 기본 제공해준다.

class 틀로 만들어진 무언가를 객체
붕어빵 틀로 붕어빵 만든다.
클래스로 객체(인스턴스)를 만든다.
1:n 관계


만약, 사용자가 하나라도 직접 생성자를 정의하면,
	더 이상 기본 생성자는 제공되지 않는다.