점과 색깔 점을 데이터 저장공간에 저장해서
점을 움직이기도 하고
점을 출력하기도하는 프로그램

부모 : x, y
자식 : x, y, color

필드(=매개변수)가 더 많은 곳을 자식 클래스로 함

Point : x, y
ColorPoint : 색

3개 만듦

관련성o, 자료형 점 o 3개 개수 o
   >>배열
Point[] datas = new Point[3];
	ColorPoint는 Point의 하위 개념이기 때문에 얘도 포함 가능
point.move(); // +1
point.move(10); //+10
point.printInfo();

오버로딩
함수명 중복정의 허용
함수명(메서드명)이 같은데, 메서드 시그니쳐(input)가 다를 때
상속과 무관

오버라이딩
메서드 재정의
상속관계에서만 발생
메서드명도 같고, 메서드 시그니쳐도 같아야함

메뉴
1. 점추가
2. 전체출력
3. 점 움직이기'
4. 프로그램 종료

동적 바인딩을 JAVA에서 알아서 실행시켜주기 때문에
"다형성"을 실현할 수 잇다.
  == 똑같은 메서드를 수행시키더라도 메서드 수행 주체가 어떤 객체냐인지에 따라
	다른 메서드가(오버라이딩된 메서드가) 수행되는 것이다.(동적 바인딩)

ex)
Animal a = new Dog();
동물이 저장될 수 있는 공간 a에 강아지 객체를 저장해주세요.
	Animal만 상속했다면 다 된다.
	class Xxx extends Animal
하지만, 일반적으로 객체를 설명할 때 가장 가까운 것을 말함
	a는 강아지 객체다
동물.hello() 안녕
강아지.hello() 멍멍
	a.hello() >> 멍멍 ==> 동적바인딩이 일어났다!

Object
JAVA의 최상위 클래스
프로그램을 돌릴 때 숨겨져 있다.
class Poing (extends Object)숨겨져 있음.

println(객체);
	Object가 인자라서 가능
	최상위 클래스

객체값이 예쁘게 출력됨
  .toString()
  Object가 제공하는 기능

class Point extends Object
  .toString()
 p.toString()


.printInfo()
syso(p) >> p.toString()
.toString() 오버라이딩 해라

for each 문
for(배열의 타입 변수명 : 배열의 이름){
}