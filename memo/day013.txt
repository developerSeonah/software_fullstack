[ MVC 패턴으로 코드 작성하기 ]

- 사용자와 닿아있는 부분 == 프론트엔드
				(데이터를 조금 다룰 수 있다)
- 프로그램에서 기능을 수행하는 부분 == 백, 서버, DB
	1) DB & DBMS(MySQL, 오라클, ...)
	2) 서비스, Controller, 비즈니스 단

Model View Controller
M V C 패턴으로 코드를 작성하면
		유지보수 용이 ★

client : 사용자가 프로그램을 이용하는 공간 (컨트롤러)
service : 실질적인 동작을 수행하는 공간 (모델)
view : 사용자와 닿아있는 공간 (뷰)

view
 사용자에게 출력하는 프로그램은 모두 void
 사용자에게 값을 받는 프로그램은 전달해야하니 return값이 있음

 view는 오직 보여주는 것, 계산을 하기 위한 공간이 아님

new 줄이기는 Spring 프레임워크의 핵심
  싱글톤 패턴 맞추기

멤버 변수 ---> getter, setter
	---> 멤버변수 초기화 == 생성자

유효성 검사도 이곳에서

1. view에선 기능을 수행하지 않는다.
2. new를 줄이면 좋다.
3. 


client
 조합만 (view에서 함수를 가져와서) 사용자가 실행할 수 있도록

service
 기능을 수행하는 부분
 기능만 구현할 뿐 출력도, 반환도 하는 곳이 아님

--------------------------------------------------------------------------------------

설계 
view
1. 사용자가 어떤 것을 볼지 쭉 쓴다.
2. 출력과 입력을 분리
	메서드를 나눔
service
1. 기능의 정의
2. 속성의 종류와 갯수를 생각
3. 달라지는 것을 찾음
4. 메서드 구현

남의 파트 끌어다쓰지 말기
자신의 파트에 해당하는 코드만 작업하는 것이 가장 중요 


-------------------------------------------------------------------------------------------
학생부 프로그램 03
학생 pk, 이름, 성적
CRUD
추가, 전체출력, 번호 검색, 이름 검색, 평균 출력, 성적변경, 학생 삭제

순서
V >> M >> C
[V] 출력 메서드, 입력을 받아오는 메서드
[백 단]
 M : DB, DBMS
 C : V와 M을 조합하는 영역
 
사용자에 출력받는 부분, 입력받는 부분
모르는 부분은 인자로 받음

데이터는 DTO를 붙여서 이름 붙임

이름 바꾸기 F2

학생은 DTO
학생부는 DAO


---------------------------------
요약 정리
MVC

M, C는 백 단
V를 프론트

view는 입출력을 담당
Scanner, syso는 여기에만 담당

Control는 view와 모델을 가져다 사용

모델은 DTO랑 DAO로 나뉨
DTO : 데이터 자체
DAO : 배열 리스트, CRUD를 가짐 == 데이터들을 담는 공간