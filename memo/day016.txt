1. 인코딩 설정 UTF-8
2. 팀원들 끼리는 환경설정을 동일하게 맞춰야합
3. 샘플데이터를 영어로 설정
4. 주석을 나노단위로 추가하여 전달
5. 설계할 때에 "메서드"
	MVC 각 파트에서 몇 개
	메서드 시그니쳐
	주 기능
6. C에서 M의 기능을 수행할 때,
	인자로 사용될 dto를 new 해야함
7. 당신이 코드를 작성하고 있다면,
	"설계가 완벽한지 확인해봐라!"

글 삭제에는 두 가지가 있다
1. 내가 1개의 글을 보고 있을 때, 이거 지울래
2. 글 목록을 보고 있을 때, N개를 선택해서 한 번에 제거
	결론) 프로그램은 1개의 DELETE 밖에 없으며,
		2번의 기능을 지원하기 위해
		for, while 등의 로직을 '추가'

피드백) CONDITION을 활용하신분들
	잘했다! 응집도를 높였다!~
	>> 실무적인 느낌은 아닐 수 있다.

사용자가 웹에서 누르고, 사용하는건 INDEX
	뒤에서(백단, 서버, C) 조작하는 건 실제 PK값


회원탈퇴를 하면
1. 게시글을 보존				[후기]
2. 글까지 함께 제거				[커뮤니티]
3. 글 보존 + 작성자가 탈퇴한 회원입니다.	[커뮤니티]

1)
그냥 회원만 삭제

2)
탈퇴를 진행할 때 덜 크리티컬한 것 부터 삭제
1. 그 동안 작성했던 글부터 제거
2. 다 제거되었으면 ※ FK 먼저 제거하고, PK 제거
3. 회원 데이터 제거

	1. 
	//글 제거 DELETE 1번 짜리를 N번 호출해서 수행
	//탈퇴하려는 사람이 섰던 글들의 PK들을 알아야 된다
	//여러개 알아야 하며(selectAll) >> PK들을 알 수 있음
	// >> 1번 1번씩 Delete

	// 오류가 있는지 확인 후

	// 그 후 PK 제거

3)
탈퇴를 시작하면
1. 로그 아웃
2. 삭제하려는 멤버가 작성했던 글 작성자 정보를 '탈퇴한 회원'으로 변경
  2-1. 한 번에 N개의 글 DB를 변경
  2-2. 1개의 글 DB를 N번 변경	(이 경우가 더 많음)

	3. 2-1경우
	// 

'탈퇴한 회원' 도는 " "(공백)으로 놔둔다.
null은 안 나올 수 있다.


	